- hosts: localhost
  become: true
  tasks:
    - name: "Install basic deps needed for install"
      apt:
        name: [
          "bash",
          "curl",
          "locales",
          "software-properties-common"
        ]
        state: "present"

    - name: "Ensure locale exists"
      locale_gen:
        name: "en_US.UTF-8"
        state: "present"

    - name: "Set default locale"
      template:
        src: "etc/default/locale.j2"
        dest: "/etc/default/locale"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "Add go apt repo"
      apt_repository:
        repo: "ppa:longsleep/golang-backports"
        state: "present"

    - name: "Add yarn apt key"
      apt_key:
        url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
        state: "present"

    - name: "Add yarn apt repo"
      apt_repository:
        repo: "deb https://dl.yarnpkg.com/debian/ stable main"
        state: "present"

    - name: "Download Elixir apt repo deb"
      get_url:
        url: "https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb"
        dest: "/tmp/ansible-downloads-erlang-solutions.deb"

    - name: "Add Elixir apt repo"
      apt:
        deb: "/tmp/ansible-downloads-erlang-solutions.deb"
        state: "present"

    - name: "Download Microsoft apt repo deb"
      get_url:
        url: "https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb"
        dest: "/tmp/ansible-downloads-packages-microsoft-prod.deb"

    - name: "Add Microsoft apt repo"
      apt:
        deb: "/tmp/ansible-downloads-packages-microsoft-prod.deb"
        state: "present"

    - name: "Add Docker apt key"
      apt_key:
        url: "https://download.docker.com/linux/ubuntu/gpg"
        state: "present"

    - name: "Add Docker apt repo"
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
        state: "present"

    - name: "Install docker-compose"
      get_url:
        url: "https://github.com/docker/compose/releases/download/1.20.1/docker-compose-Linux-x86_64"
        dest: "/usr/local/bin/docker-compose"
        mode: 0755

    - name: "Add NeoVim apt repo"
      apt_repository:
        repo: "ppa:neovim-ppa/stable"
        state: "present"

    - name: "Install the kitchen sink"
      apt:
        name: [
          "autoconf",
          "build-essential",
          "ctags",
          "docker-ce",
          "elixir",
          "emacs-nox",
          "esl-erlang",
          "git",
          "global",
          "golang-go",
          "inotify-tools",
          "jq",
          "neovim",
          "nodejs",
          "npm",
          "powershell",
          "python-dev",
          "python-pip",
          "python3-dev",
          "python3-pip",
          "ruby",
          "tmux",
          "vim-nox",
          "yarn",
          "zsh",
          # for mosh build
          "automake",
          "libtool",
          "g++",
          "protobuf-compiler",
          "libprotobuf-dev",
          "libboost-dev",
          "libutempter-dev",
          "libncurses5-dev",
          "zlib1g-dev",
          "libio-pty-perl",
          "libssl-dev",
          "pkg-config"
        ]
        update_cache: "yes"
        state: "present"

    - name: "Ensure /opt/src directory exists"
      file:
        path: "/opt/src"
        state: directory
        owner: "root"
        group: "root"
        mode: 0755

    - name: "Clone mosh for true color support"
      git:
        repo: "https://github.com/mobile-shell/mosh.git"
        dest: "/opt/src/mosh"
        version: "c3a2756065a0fb04cfd2681280123b362d862a5e"

    - name: "Check if mosh configure exists"
      stat:
        path: "/opt/src/mosh/configure"
      register: mosh_configure_file

    - name: "Check if mosh Makefile exists"
      stat:
        path: "/opt/src/mosh/Makefile"
      register: mosh_makefile_file

    - name: "Check if mosh VERSION file exists"
      stat:
        path: "/opt/src/mosh/VERSION"
      register: mosh_version_file

    - name: "Check if mosh binary exists"
      stat:
        path: "/usr/local/bin/mosh"
      register: mosh_binary_file

    - name: "Mosh ./autogen.sh"
      command: "./autogen.sh"
      args:
        chdir: "/opt/src/mosh"
      register: mosh_autogen
      when: mosh_configure_file.stat.exists == False

    - name: "Mosh ./configure"
      command: "./configure"
      args:
        chdir: "/opt/src/mosh"
      register: mosh_configure
      when: mosh_autogen.changed or mosh_makefile_file.stat.exists == False

    - name: "Mosh make"
      command: "make"
      args:
        chdir: "/opt/src/mosh"
      register: mosh_make
      when: mosh_configure.changed or mosh_version_file.stat.exists == False

    - name: "Mosh make install"
      command: "make install"
      args:
        chdir: "/opt/src/mosh"
      register: mosh_make_install
      when: mosh_make.changed or mosh_binary_file.stat.exists == False

    - name: "Install Terraform"
      unarchive:
        src: "https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip"
        dest: /usr/local/bin
        remote_src: yes
